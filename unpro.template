{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "unPRO stack",

  "Parameters" : {

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "NATEIPAllocationId" : {
      "Description" : "EIPAllocationId to use for the NAT",
      "Type" : "String"
    },
    "S3BackupRole" : {
      "Description" : "Existing IAM Role for S3 backup",
      "Type" : "String",
      "Default" : "S3Backup"
    },
    "VpcCidr" : {
      "Description" : "CIDR address for the VPC to be created.",
      "Type" : "String",
      "Default" : "10.0.0.0/16"
    },
    "PublicSubnetCidr" : {
      "Description" : "Address range for a public subnet to be created in AZ.",
      "Type" : "String",
      "Default" : "10.0.0.0/24"
    },
    "PrivateSubnetCidr" : {
      "Description" : "Address range for a public subnet to be created in AZ.",
      "Type" : "String",
      "Default" : "10.0.1.0/24"
    },
    "NATNodeInstanceType" : {
      "Description" : "Instance type for NAT nodes.",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro","t2.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "MumbleNodeInstanceType" : {
      "Description" : "Instance type for Mumble nodes.",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro","t2.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "VPNNodeInstanceType" : {
      "Description" : "Instance type for VPN nodes.",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro","t2.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "WWWNodeInstanceType" : {
      "Description" : "Instance type for WWW nodes.",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro","t2.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "AvailabilityZone" : {
      "Description" : "AZ to use for PublicSubnet/PrivateSubnet.",
      "Type" : "String",
      "Default" : "us-east-1c"
    }
  },

  "Mappings" : {
    "AWSNATAMI" : {
      "us-east-1"      : { "AMI" : "ami-6e9e4b06" },
      "us-west-2"      : { "AMI" : "ami-8b6912bb" },
      "us-west-1"      : { "AMI" : "ami-1d2b2958" },
      "eu-west-1"      : { "AMI" : "ami-5b60b02c" },
      "ap-southeast-1" : { "AMI" : "ami-ba7538e8" },
      "ap-southeast-2" : { "AMI" : "ami-a164029b" },
      "ap-northeast-1" : { "AMI" : "ami-49c29e48" },
      "sa-east-1"      : { "AMI" : "ami-8b72db96" }
    },
    "UBUNTUAMI" : {
      "us-east-1"      : { "AMI" : "ami-76e27e1e" },
      "us-west-2"      : { "AMI" : "ami-838dd9b3" },
      "us-west-1"      : { "AMI" : "ami-d5180890" },
      "eu-west-1"      : { "AMI" : "ami-863686f1" },
      "ap-southeast-1" : { "AMI" : "ami-f75875a5" },
      "ap-southeast-2" : { "AMI" : "ami-950b62af" },
      "ap-northeast-1" : { "AMI" : "ami-4ceaed4d" },
      "sa-east-1"      : { "AMI" : "ami-cb70c1d6" }
    }
  },

  "Resources" : {
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Ref" : "VpcCidr" },
        "EnableDnsHostnames" : "true",
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "PublicSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone" : { "Ref" : "AvailabilityZone" },
        "CidrBlock" : { "Ref" : "PublicSubnetCidr" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "PrivateSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone" : { "Ref" : "AvailabilityZone" },
        "CidrBlock" : { "Ref" : "PrivateSubnetCidr" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "GatewayToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "PrivateRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },

    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PrivateRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "NATInstance" }
      }
    },

    "PublicSubnetRTAssoc" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "PrivateSubnetRTAssoc" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },

    "NATEIPAssociation" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "AllocationId" : { "Ref" : "NATEIPAllocationId" },
        "NetworkInterfaceId" : { "Ref" : "NATNetworkInterface" }
      }
    },

    "NATNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "PrivateIpAddress" : "10.0.0.10",
        "Description" : "NAT Interface",
        "GroupSet" : [ { "Ref" : "NATSecurityGroup" } ],
        "SourceDestCheck" : "false"
      }
    },

    "S3BackupInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [{ "Ref" : "S3BackupRole" }]
      }
    },

    "NATInstance" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "GatewayToInternet",
      "Metadata" : {
        "Comment1" : "Create NAT"
      },
      "Properties" : {
        "InstanceType" : { "Ref" : "NATNodeInstanceType" } ,
        "KeyName" : { "Ref" : "KeyName" },
        "NetworkInterfaces" : [ { 
          "NetworkInterfaceId" : { "Ref" : "NATNetworkInterface" },
          "DeviceIndex" : "0"
        } ],
        "ImageId" : { "Fn::FindInMap" : [ "AWSNATAMI", { "Ref" : "AWS::Region" }, "AMI" ]},
        "Tags" : [
          { "Key" : "Name", "Value" : "NAT" }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
	  "yum update -y aws*\n",
	  ". /etc/profile.d/aws-apitools-common.sh\n",
          "# Configure iptables\n",
	  "/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE\n",
	  "/sbin/iptables-save > /etc/sysconfig/iptables\n",
          "# Configure ip forwarding and redirects\n",
          "echo 1 > /proc/sys/net/ipv4/ip_forward && echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects\n",
	  "mkdir -p /etc/sysctl.d/\n",
	  "cat <<EOF > /etc/sysctl.d/nat.conf\n",
	  "net.ipv4.ip_forward = 1\n",
	  "net.ipv4.conf.eth0.send_redirects = 0\n",
	  "EOF\n",
          "wget -O bootstrap-unpro.sh https://raw.githubusercontent.com/TronPaul/unpro-salt/master/bootstrap-unpro-salt\n",
          "sh ./bootstrap-unpro.sh -i nat\n"
        ]]}}
      }
    },

    "NATSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Rules for allowing access to HA Nodes",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
           { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : "0.0.0.0/0" } ,
           { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0" } ,
           { "IpProtocol" : "tcp", "FromPort" : "64738",  "ToPort" : "64738",  "CidrIp" : "0.0.0.0/0" } ,
           { "IpProtocol" : "udp", "FromPort" : "64738",  "ToPort" : "64738",  "CidrIp" : "0.0.0.0/0" } ,
           { "IpProtocol" : "-1", "FromPort" : "0",  "ToPort" : "65535",  "CidrIp" : { "Ref" : "VpcCidr" }} ],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "-1", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0" } ]
      }
    },

    "NATAllowICMP" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "NATSecurityGroup" },
        "IpProtocol" : "icmp", 
	"FromPort" : "-1",  
	"ToPort" : "-1",  
	"SourceSecurityGroupId" : { "Ref" : "NATSecurityGroup" }
      }
    },

    "NATPrivateDNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "DependsOn" : "NATInstance",
      "Properties" : {
        "HostedZoneName" : "teamunpro.",
        "Name" : "nat.teamunpro.",
        "Type" : "CNAME",
        "TTL" : "60",
        "ResourceRecords" : [ {"Fn::GetAtt" : [ "NATInstance", "PrivateDnsName" ] } ]
      }
    },

    "NATPublicDNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "DependsOn" : "NATEIPAssociation",
      "Properties" : {
        "HostedZoneName" : "teamunpro.com.",
        "Name" : "teamunpro.com",
        "Type" : "A",
        "TTL" : "60",
        "ResourceRecords" : [ {"Fn::GetAtt" : [ "NATInstance", "PublicIp" ] } ]
      }
    },

    "MumbleNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "PrivateIpAddress" : "10.0.1.10",
        "Description" : "NAT Interface",
        "GroupSet" : [ { "Ref" : "MumbleSecurityGroup" } ]
      }
    },

    "MumbleInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Comment1" : "Create mumble server"
      },
      "Properties" : {
        "InstanceType" : { "Ref" : "MumbleNodeInstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "NetworkInterfaces" : [ { 
          "NetworkInterfaceId" : { "Ref" : "MumbleNetworkInterface"},
          "DeviceIndex" : "0"
        } ],
        "ImageId" : { "Fn::FindInMap" : [ "UBUNTUAMI", { "Ref" : "AWS::Region" }, "AMI" ]},
        "Tags" : [
          { "Key" : "Name", "Value" : "mumble" }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "wget -O bootstrap-unpro.sh https://raw.githubusercontent.com/TronPaul/unpro-salt/master/bootstrap-unpro-salt\n",
          "sh ./bootstrap-unpro.sh -i mumble\n"
        ]]}}
      }
    },

    "MumbleSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Rules for allowing access to HA Nodes",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
           { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : { "Ref" : "VpcCidr" }} ,
           { "IpProtocol" : "-1", "FromPort" : "64738",  "ToPort" : "64738",  "CidrIp" : { "Ref" : "VpcCidr" }} ],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "-1", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0" } ]
      }
    },

    "MumblePrivateDNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "DependsOn" : "MumbleInstance",
      "Properties" : {
        "HostedZoneName" : "teamunpro.",
        "Name" : "mumble.teamunpro.",
        "Type" : "CNAME",
        "TTL" : "60",
        "ResourceRecords" : [ {"Fn::GetAtt" : [ "MumbleInstance", "PrivateDnsName" ] } ]
      }
    },

    "VPNNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "PrivateIpAddress" : "10.0.1.11",
        "Description" : "NAT Interface",
        "GroupSet" : [ { "Ref" : "VPNSecurityGroup" } ]
      }
    },

    "VPNInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Comment1" : "Create openvpn server"
      },
      "Properties" : {
        "InstanceType" : { "Ref" : "VPNNodeInstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "NetworkInterfaces" : [ { 
          "NetworkInterfaceId" : { "Ref" : "VPNNetworkInterface"},
          "DeviceIndex" : "0"
        } ],
        "ImageId" : { "Fn::FindInMap" : [ "UBUNTUAMI", { "Ref" : "AWS::Region" }, "AMI" ]},
        "Tags" : [
          { "Key" : "Name", "Value" : "vpn" }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "wget -O bootstrap-unpro.sh https://raw.githubusercontent.com/TronPaul/unpro-salt/master/bootstrap-unpro-salt\n",
          "sh ./bootstrap-unpro.sh -i vpn\n"
        ]]}}
      }
    },

    "VPNSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Rules for allowing access to HA Nodes",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
           { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : { "Ref" : "VpcCidr" }},
           { "IpProtocol" : "udp", "FromPort" : "1194",  "ToPort" : "1194",  "CidrIp" : { "Ref" : "VpcCidr" }}],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "-1", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0" } ]
      }
    },

    "VPNPrivateDNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "DependsOn" : "VPNInstance",
      "Properties" : {
        "HostedZoneName" : "teamunpro.",
        "Name" : "vpn.teamunpro.",
        "Type" : "CNAME",
        "TTL" : "60",
        "ResourceRecords" : [ {"Fn::GetAtt" : [ "VPNInstance", "PrivateDnsName" ] } ]
      }
    },

    "WWWNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "PrivateIpAddress" : "10.0.1.12",
        "Description" : "NAT Interface",
        "GroupSet" : [ { "Ref" : "WWWSecurityGroup" } ]
      }
    },

    "WWWInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Comment1" : "Create www server"
      },
      "Properties" : {
        "InstanceType" : { "Ref" : "WWWNodeInstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "NetworkInterfaces" : [ { 
          "NetworkInterfaceId" : { "Ref" : "WWWNetworkInterface"},
          "DeviceIndex" : "0"
        } ],
        "ImageId" : { "Fn::FindInMap" : [ "UBUNTUAMI", { "Ref" : "AWS::Region" }, "AMI" ]},
        "Tags" : [
          { "Key" : "Name", "Value" : "www" }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "wget -O bootstrap-unpro.sh https://raw.githubusercontent.com/TronPaul/unpro-salt/master/bootstrap-unpro-salt\n",
          "sh ./bootstrap-unpro.sh -i www\n"
        ]]}}
      }
    },

    "WWWSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Rules for allowing access to HA Nodes",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
           { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : { "Ref" : "VpcCidr" }},
           { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : { "Ref" : "VpcCidr" }}, 
           { "IpProtocol" : "tcp", "FromPort" : "443",  "ToPort" : "443",  "CidrIp" : { "Ref" : "VpcCidr" }}],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "-1", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0" } ]
      }
    },

    "WWWPrivateDNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "DependsOn" : "WWWInstance",
      "Properties" : {
        "HostedZoneName" : "teamunpro.",
        "Name" : "www.teamunpro.",
        "Type" : "CNAME",
        "TTL" : "60",
        "ResourceRecords" : [ {"Fn::GetAtt" : [ "WWWInstance", "PrivateDnsName" ] } ]
      }
    }
  },

  "Outputs" : {
    "VPCID" : {
      "Description" : "VPC Info.",
      "Value" : { "Fn::Join" : [ "", [ { "Ref" : "VPC" }, " (", { "Ref" : "VpcCidr" }, ")" ]] }
    },
    "PublicSubnetCidr" : {
      "Description" : "Public Subnet.",
      "Value" : { "Fn::Join" : [ "", [ { "Ref" : "PublicSubnet" }, " (", { "Ref" : "PublicSubnetCidr" }, ") ", { "Ref" : "AvailabilityZone" } ]] }
    },
    "PrivateSubnet" : {
      "Description" : "Private Subnet.",
      "Value" : { "Fn::Join" : [ "", [ { "Ref" : "PrivateSubnet" }, " (", { "Ref" : "PrivateSubnetCidr" }, ") ", { "Ref" : "AvailabilityZone" } ]] }
    },
    "PublicRouteTable" : {
      "Description" : "Public Route Table.",
      "Value" : { "Fn::Join" : [ "", [ { "Ref" : "PublicRouteTable" }, " (0.0.0.0/0 -> ", { "Ref" : "InternetGateway" }, ")" ]] }
    },
    "PrivateRouteTable" : {
      "Description" : "Private Route Table.",
      "Value" : { "Fn::Join" : [ "", [ { "Ref" : "PrivateRouteTable" }, " (0.0.0.0/0 -> ", { "Ref" : "NATInstance" }, ")" ]] }
    }
  }
}
